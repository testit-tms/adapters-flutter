// Mocks generated by Mockito 5.4.5 from annotations
// in testit_adapter_flutter/test/service/validation_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:http/http.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:testit_adapter_flutter/src/manager/i_api_manager.dart' as _i2;
import 'package:testit_adapter_flutter/src/model/config_model.dart' as _i4;
import 'package:testit_adapter_flutter/src/model/test_result_model.dart' as _i6;
import 'package:testit_api_client_dart/api.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IApiManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockIApiManager extends _i1.Mock implements _i2.IApiManager {
  MockIApiManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String?> getFirstNotFoundWorkItemIdAsync(
    _i4.ConfigModel? config,
    Iterable<String>? workItemsIds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getFirstNotFoundWorkItemIdAsync, [
              config,
              workItemsIds,
            ]),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<Iterable<String>> getProjectConfigurationsAsync(
    _i4.ConfigModel? config,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getProjectConfigurationsAsync, [config]),
            returnValue: _i3.Future<Iterable<String>>.value(<String>[]),
          )
          as _i3.Future<Iterable<String>>);

  @override
  _i3.Future<_i5.TestRunV2ApiResult?> getTestRunOrNullByIdAsync(
    _i4.ConfigModel? config,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTestRunOrNullByIdAsync, [config]),
            returnValue: _i3.Future<_i5.TestRunV2ApiResult?>.value(),
          )
          as _i3.Future<_i5.TestRunV2ApiResult?>);

  @override
  _i3.Future<bool> isTestNeedsToBeRunAsync(
    _i4.ConfigModel? config,
    String? externalId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#isTestNeedsToBeRunAsync, [config, externalId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> processTestResultAsync(
    _i4.ConfigModel? config,
    _i6.TestResultModel? testResult,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#processTestResultAsync, [config, testResult]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> tryCompleteTestRunAsync(_i4.ConfigModel? config) =>
      (super.noSuchMethod(
            Invocation.method(#tryCompleteTestRunAsync, [config]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i5.AttachmentModel?> tryCreateAttachmentAsync(
    _i4.ConfigModel? config,
    _i7.MultipartFile? file,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCreateAttachmentAsync, [config, file]),
            returnValue: _i3.Future<_i5.AttachmentModel?>.value(),
          )
          as _i3.Future<_i5.AttachmentModel?>);

  @override
  _i3.Future<void> tryCreateTestRunOnceAsync(_i4.ConfigModel? config) =>
      (super.noSuchMethod(
            Invocation.method(#tryCreateTestRunOnceAsync, [config]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
